const timeTravelHelper = require("../helpers/time_travel_helper_for_truffle");
const TimeLock = artifacts.require("TimeLock");

module.exports = async function (callback) {
let timeLockAddress = "0x8bced3102d9a24868c204a45d77c272cc2cfadd9";

    var timeLock = new TimeLock(timeLockAddress);
    // const lockTime = 140;
    // var balanceBefore =  await web3.eth.getBalance(timeLockAddress);
    // console.log("Contract balance: " + balanceBefore);

    // await timeLock.lockEth(lockTime, 1, { value: 1 });

    // console.log("Contract balance: " + await web3.eth.getBalance(timeLockAddress));
    // console.log("Current block number: " + await web3.eth.getBlockNumber());

    // for (var i = 0; i < lockTime / 14; i++) {
    //     await timeTravelHelper.advanceBlock();
    // }
    // console.log("Current block number: " + await web3.eth.getBlockNumber());

    // await timeLock.withdraw();
    
    // console.log("Contract balance: " + await web3.eth.getBalance(timeLockAddress));
    // console.log("Should be         " + balanceBefore);

    const lockTime = 41;
    const amount = 100;
    console.log("Lock " + amount + " Wei for " + lockTime + " seconds");
    const currentBlockNumber = await web3.eth.getBlockNumber();
    const currentBlock = await web3.eth.getBlock(currentBlockNumber);
    const retrievalTimestamp = currentBlock.timestamp + lockTime;
    console.log("Retrieval is allowed at: " + retrievalTimestamp)

    console.log("Timestamp before lock", await getCurrentBlockTimestamp())
    await timeLock.lockEth(lockTime, amount, { value: 100 })
    console.log("Timestamp after lock", await getCurrentBlockTimestamp())
    
    console.log("Current block number: " + currentBlockNumber);

    // Simulate delay
    // for (var i = 0; i < 1; i++) {
    //     // setTimeout(14)
    //     await timeTravelHelper.advanceTimeAndBlock(14);
    //     console.log("Mined new block: " + await web3.eth.getBlockNumber());
    // }

    console.log("Timestamp before", await getCurrentBlockTimestamp());
    await timeTravelHelper.advanceBlock();
    console.log("Timestamp after", await getCurrentBlockTimestamp());

    // Owner
    console.log("Timestamp before withdraw", await getCurrentBlockTimestamp())
    await timeLock.withdraw();
    console.log("Timestamp after withdraw", await getCurrentBlockTimestamp())
    const newBlockNumber = await web3.eth.getBlockNumber();
    const newBlock = await web3.eth.getBlock(newBlockNumber);
    console.log("Balance of contract: " + await web3.eth.getBalance(timeLock.address));
    console.log("Withdraw successful at:       " + newBlock.timestamp);
    console.log("Withdraw should have been at: " + retrievalTimestamp);
    
    callback();
}

async function getCurrentBlockTimestamp() {
    const currentBlockNumber = await web3.eth.getBlockNumber();
    const currentBlock = await web3.eth.getBlock(currentBlockNumber);
    return currentBlock.timestamp;
}